// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel 		ClusterCull
#pragma kernel 		ClearCluster
#pragma kernel 		UnsafeCull
#pragma kernel		MoveVertex
#pragma kernel		MoveCluster
#pragma kernel 		FrustumFilter
#pragma kernel		OcclusionRecheck
#pragma kernel		ClearOcclusionData
#define COMPUTESHADER
#include "UnityCG.cginc"
float4 _planes[PLANECOUNT];
float3 _FrustumMinPoint;
float3 _FrustumMaxPoint;
struct ClusterMesh
{
	float3 		extent;
	float3 		position;
	int 		index;
};


RWStructureBuffer<ClusterMesh> 	clusterBuffer;
RWStructureBuffer<uint>			instanceCountBuffer;
RWStructureBuffer<uint>			resultBuffer;
Texture2D<half> 				_HizDepthTex;
SamplerState					sampler_HizDepthTex;

uint		_Count;
float3		_CameraUpVector;
float4x4	_NonJitterVP;		// 抖动


float PlaneTest( ClusterMesh info )
{
	float3 position 	= info.position;
	float3 extent		= info.extent;
	float3 minpos		= position - extent;
	float3 maxpos		= position + extent;
	float  outOfRange	= dot( _FrustumMinPoint > maxpos, 1 ) + dot( _FrustumMaxPoint < minpos, 1 );
	if( outOfRange > 0.5 )
		return 0;
		
	[unroll]
	for( uint i = 0; i < 6; ++i)
	{
		float4 plane	= _planes[i];
		float3 absNormal= abs( plane.xyz );
		if((dot( position, plane.xyz ) - dot( absNormal, extent )) > -plane.w )
		{
			return 0;
		}
	}
	return 1;
}


static const float3 aggressiveExtentArray[8] = 
{
	float3( 1, 1, 1 ),
	float3( 1, 1,_1 ),
	float3( 1,-1, 1 ),
	float3( 1,-1,-1 ),
	float3(-1, 1, 1 ),
	float3(-1, 1,-1 ),
	float3(-1,-1, 1 ),
	float3(-1,-1,-1 )
}

float4 _HizScreenPreject;
float OcclusionTest( ClusterMesh info, float4x4 vp )
{
	#ifdef UNITY_REVERSED_Z
	float minZ = 0;
	#else
	float minZ = 1;
	#endif
	
	float2 maxXY = 1; float minXY = 0;
	for(uint i = 0; i < 8; ++i )
	{
		float3 boxCenter = info.position + info.extent * aggressiveExtentArray[i];
		float4 clippos   = mul( vp, float4( boxCenter, 1 ) );
		clippos /= clippos.w;
		minXY		= min( clippos.xy, minXY );
		maxXY		= max( clippos.xy, maxXY );
		
		#ifdef UNITY_REVERSED_Z
		minZ 		= max( minZ, clippos.z );
		#else
		minZ 		= min( minZ, clippos.z );
		#endif
	}
	
	float4 boxUVS 	= float4( minXY, maxXY );
	boxUVS			= saturate( boxUVS * 0.5 + 0.5 );
	float2 size		= (boxUVS.zw - boxUVS.xy) * _HizScreenPreject.xy;
	float  mip		= (log2(max(size.x, size.y )));
	if( mip > _HizScreenPreject.z )
	{
		return 1;
	}
	mip				= ceil( mip );
	mip				= min( mip, _HizScreenPreject.z );
	float level_lower = max( mip - 1, 0 );
	float2 scale 	= exp2( -level_lower ) * _HizDepthTex.xy ;
	float2 a 		= floor( boxUVS.xy * scale );
	float2 b 		= ceil( boxUVS.zw * scale );
	float2 dims		= b - a;
	
	// use the lower level if we only touch <= 2 texels in both dimensions
	if( dims.x <= 2 && dims.y <= 2 )
		mip 		= level_lower;
		
	float4 depth 	= float4( _HizDepthTex.SampleLevel( sampler_HizDepthTex, boxUVS.xy, mip),
							  _HizDepthTex.SampleLevel( sampler_HizDepthTex, boxUVS.zy, mip),
							  _HizDepthTex.SampleLevel( sampler_HizDepthTex, boxUVS.xw, mip),
							  _HizDepthTex.SampleLevel( sampler_HizDepthTex, boxUVS.zw, mip));
							  
	#ifdef UNITY_REVERSED_Z
	depth.xy 		= min( depth.xy, depth.zw );
	depth.x 		= min( depth.x, depth.y );
	return minZ >= depth.x;
	#else
	depth.xy 		= max( depth.xy, depth.zw );
	depth.x 		= max( depth.x, depth.y );
	return minZ <= depth.x;
	#endif
	
}


[numthreads(64,1,1)]
void ClusterCull( uint id : SV_DISPATCHTHREADID )
{
	if( id >= _Count ) return;
	
	ClusterMesh currentObject = clusterBuffer[id];
	float result = PlaneTest( currentObject );
	if( result > 0.5 )
	{
		uint currentIndex;
		InterlockedAdd( instanceCountBuffer[1], 1, currentIndex );
		resultBuffer[currentIndex] = id;
	}
}

[numthreads(1,1,1)]
void ClearCluster( uint id : SV_DISPATCHTHREADID )
{
	instanceCountBuffer[1] = 0;
}


[numthreads(64,1,1)]
void UnsafeCull( uint id : SV_DISPATCHTHREADID )
{
	if( id >= _Count ) return;
	
	ClusterMesh currentObject = clusterBuffer[id];
	if( (PlaneTest(currentObject ) * OcclusionTest( currentObject, _NonJitterVP )) > 0.5 )
	{
		uint currentIndex;
		InterlockedAdd( instanceCountBuffer[1], 1, currentIndex );
		resultBuffer[currentIndex] = id;
	}
}



RWStructureBuffer<Point> 	verticeBuffer;
float3 	_SceneOffset;
uint	_OffsetIndex;
[numthreads(1, CLUSTERCLIPCOUNT, 1 )
void MoveVertex( uint2 id : SV_DISPATCHTHREADID )
{
	verticeBuffer[(id.x + _OffsetIndex) * CLUSTERCLIPCOUNT + id.y ].vertex += _SceneOffset;
}


[numthreads(64,1,1)]
void MoveCluster( uint id : SV_DISPATCHTHREADID )
{
	if( id >= _Count )return;
	clusterBuffer[id + _OffsetIndex].position += _SceneOffset;
}


RWStructureBuffer<uint> 	reCheckResult;
RWStructureBuffer<uint> 	reCheckCount;
RWStructureBuffer<uint>		dispatchBuffer;
float4x4					_LastVP;
[numthreads(64,1,1,)]
void FrustumFilter( uint id : SV_DISPATCHTHREADID )
{
	if( id > _Count )
		return;
		
	ClusterMesh currentObject = clusterBuffer[id];
	if( PlaneTest( currentObject ) > 0.5 )
	{
		uint currentIndex;
		[branch]
		if( OcclusionTest( currentObject, _LastVP ) > 0.5 )
		{
			InterlockedAdd( instanceCountBuffer[1], 1, currentIndex );
		}
		else
		{
			InterlockedAdd( dispatchBuffer[4], 1, currentIndex );
			reCheckResult[currentIndex] = id;
		}
	}
}


[numthreads( 64, 1, 1 )]
void OcclusionRecheck( uint id : SV_DISPATCHTHREADID )
{
	if( id >= dispatchBuffer[3] )
		return;
	
	int index = reCheckResult[id];
	ClusterMesh currentObject = clusterBuffer[index];
	
	[branch]
	if( OcclusionTest( currentObject, _NonJitterVP ) > 0.5 )
	{
		uint currentIndex;
		InterlockedAdd( reCheckCount[1], 1, currentIndex );
		resultBuffer[currentIndex] = index;
	}
}

[numthreads(1,1,1)]
void ClearOcclusionData( uint id : SV_DISPATCHTHREADID )
{
	uint threadCount 	= dispatchBuffer[4];
	dispatchBuffer[0] 	= uint( ceil((0.1 + threadCount ) / 64.0 ));
	dispatchBuffer[3] 	= threadCount;
	dispatchBuffer[4] 	= 0;
	reCheckCount[1] 	= 0;
}