// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClusterAssignLight
#include "UnityCG.cginc"



struct ClusterBox
{
    float3 p0, p1, p2, p3, p4, p5, p6, p7;
};

struct PointLight
{
    float3          color;
    float           intensity;
    float3          position;
    float           radius;
};

struct LightIndex
{
    int             count;
    int             start;
};

float               _numClusterX;
float               _numClusterY;
float               _numClusterZ;
int                 _numLights;
int                 _maxNumLightsPerCluster;



RWStructuredBuffer<ClusterBox>      _clusterBuffer;    
RWStructuredBuffer<PointLight>      _lightBuffer;       
RWStructuredBuffer<uint>            _lightAssignBuffer;
RWStructuredBuffer<LightIndex>      _assignTable;



/**
* convert a 3D cluster index into a 1D cluster
*/
uint ComputeClusterIndex1D(uint3 clusterIndex3D)
{
    return  _numClusterX * _numClusterY * clusterIndex3D.z
        + _numClusterY * clusterIndex3D.y
        + clusterIndex3D.x;
}


bool PointSphereIntersect(float3 p, float4 shpere)
{
    return distance(p, shpere.xyz) < shpere.w;
}


bool ClusterLightIntersect(ClusterBox box, PointLight lit)
{
    float4 shpere = float4(lit.position, lit.radius);
    return PointSphereIntersect(box.p0, shpere)
        || PointSphereIntersect(box.p1, shpere)
        || PointSphereIntersect(box.p2, shpere)
        || PointSphereIntersect(box.p3, shpere)
        || PointSphereIntersect(box.p4, shpere)
        || PointSphereIntersect(box.p5, shpere)
        || PointSphereIntersect(box.p6, shpere)
        || PointSphereIntersect(box.p7, shpere);
}


[numthreads(16, 16, 1)]
void ClusterAssignLight(uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID)
{
    // cluster ID
    uint i              = gtid.x;
    uint j              = gtid.y;
    uint k              = gid.x;
    uint3 cluster3D     = uint3(i, j, k);
    uint clusterID      = ComputeClusterIndex1D(cluster3D);

    // cluster box 
    ClusterBox box      = _clusterBuffer[clusterID];
    uint startIndex     = clusterID * _maxNumLightsPerCluster;
    uint endIndex       = startIndex;

    for (int n = 0; n < _numLights; n++)
    {
        PointLight pl   = _lightBuffer[n];
        if (!ClusterLightIntersect(box, pl)) 
            continue;
        _lightAssignBuffer[endIndex++] = uint(n);
    }

    LightIndex idx;
    idx.count           = endIndex - startIndex;
    idx.start           = startIndex;
    _assignTable[clusterID] = idx;
}